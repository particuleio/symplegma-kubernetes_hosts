---
- name: Kubernetes | Ensure required directory exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "u+rw,g+r,o+r"
  with_items:
    - "{{ bin_dir }}"
    - "{{ systemd_units_dir }}"
    - "{{ kubelet_systemd_dropin_dir }}"

- name: Kubernetes | Get Kubernetes binaries
  ansible.builtin.get_url:
    url: "{{ kubernetes_binaries_url }}/{{ item }}"
    mode: 0755
    dest: "{{ bin_dir }}/{{ item }}"
    force: true
  with_items: "{{ kubernetes_binaries }}"
  notify: "restart kubelet"

- name: Kubernetes | Get crictl
  ansible.builtin.unarchive:
    src: "{{ crictl_release_url }}"
    dest: "{{ bin_dir }}"
    remote_src: true

- name: Kubernetes | Install crictl config
  ansible.builtin.template:
    src: crictl.yaml.j2
    dest: /etc/crictl.yaml
    mode: 'u+rw,g+r,o+r'

- name: Kubernetes | Get Kubelet config file
  ansible.builtin.copy:
    content: "{{ item | regex_replace( '/usr/bin', bin_dir) }}"
    mode: 'u+rw,g+r,o+r'
    dest: "{{ kubelet_systemd_unit }}"
  loop: "{{ lookup('url', kubelet_systemd_unit_url, split_lines=False, wantlist=True ) }}"
  notify: "restart kubelet"

- name: Kubernetes | Get Kubeadm drop-in file
  ansible.builtin.copy:
    content: "{{ item | regex_replace( '/usr/bin', bin_dir) }}"
    mode: 'u+rw,g+r,o+r'
    dest: "{{ kubeadm_systemd_dropin_file }}"
  loop: "{{ lookup('url', kubeadm_systemd_dropin_url, split_lines=False, wantlist=True ) }}"
  notify: "restart kubelet"

- name: Kubernetes | Set kubelet extra args if defined
  ansible.builtin.lineinfile:
    create: true
    path: /etc/default/kubelet
    mode: 'u+rw,g+r,o+r'
    line: 'KUBELET_EXTRA_ARGS={{ kubelet_extra_args }}'
    regexp: 'KUBELET_EXTRA_ARGS='
    state: present
  when: kubelet_extra_args is defined
  notify: "restart kubelet"

- name: Kubernetes | Trigger "restart kubelet" handler
  ansible.builtin.meta: flush_handlers

- name: Kubernetes | Ensure Kubelet is enabled and running
  ansible.builtin.systemd:
    state: started
    name: kubelet.service
    enabled: true
